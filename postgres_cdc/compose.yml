version: "3.8"
services:

# POSTGRESQL
  local_pgdb1:
    image: postgres
    container_name: local_pgdb1
    restart: always
    networks:
      - postgrescdc_network
    ports:
      - "5432:5432"
    command: ["postgres", "-c", "wal_level=logical"]
    environment:
      POSTGRES_USER: user-name
      POSTGRES_PASSWORD: strong-password
    volumes:
      - local_pgdata_1:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user-name -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  local_pgdb2:
    image: postgres
    container_name: local_pgdb2
    restart: always
    networks:
      - postgrescdc_network
    command: ["postgres", "-c", "wal_level=logical"]
    ports:
      - "15432:5432"
    environment:
      POSTGRES_USER: user-name
      POSTGRES_PASSWORD: strong-password
    volumes:
      - local_pgdata_2:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user-name -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    networks:
      - postgrescdc_network
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
      PGADMIN_DEFAULT_PASSWORD: strong-password
    volumes:
      - ./pgadmin-data:/var/lib/pgadmin
    depends_on:
      local_pgdb1:
        condition: service_healthy
      local_pgdb2:
        condition: service_healthy

## REDPANDA
  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
    container_name: redpanda-0
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    networks:
      - postgrescdc_network
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9644/v1/status/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  redpanda-1:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:29092
      - --advertise-kafka-addr internal://redpanda-1:9092,external://localhost:29092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:28082
      - --advertise-pandaproxy-addr internal://redpanda-1:8082,external://localhost:28082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:28081
      - --rpc-addr redpanda-1:33145
      - --advertise-rpc-addr redpanda-1:33145
      - --mode dev-container
      - --smp 1
      - --default-log-level=info
      - --seeds redpanda-0:33145
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
    container_name: redpanda-1
    volumes:
      - redpanda-1:/var/lib/redpanda/data
    networks:
      - postgrescdc_network
    ports:
      - 28081:28081
      - 28082:28082
      - 29092:29092
      - 29644:9644
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9644/v1/status/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  redpanda-2:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:39092
      - --advertise-kafka-addr internal://redpanda-2:9092,external://localhost:39092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:38082
      - --advertise-pandaproxy-addr internal://redpanda-2:8082,external://localhost:38082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:38081
      - --rpc-addr redpanda-2:33145
      - --advertise-rpc-addr redpanda-2:33145
      - --mode dev-container
      - --smp 1
      - --default-log-level=info
      - --seeds redpanda-0:33145
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.3
    container_name: redpanda-2
    volumes:
      - redpanda-2:/var/lib/redpanda/data
    networks:
      - postgrescdc_network
    ports:
      - 38081:38081
      - 38082:38082
      - 39092:39092
      - 39644:9644
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9644/v1/status/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.7.1
    networks:
      - postgrescdc_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
    ports:
      - 8080:8080
    depends_on:
      redpanda-0:
        condition: service_healthy
      redpanda-1:
        condition: service_healthy
      redpanda-2:
        condition: service_healthy

# RPCN - REDPANDA CONNECT
  rpcn:
    container_name: rpcn
    image: docker.redpanda.com/redpandadata/connect:4
    command: ["run", "cdc.yaml"]
    networks:
      - postgrescdc_network
    ports:
      - "4195:4195"
    volumes:
      - ${PWD}/cdc.yaml:/cdc.yaml
    depends_on:
      console:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", " wget -O /tmp/ready http://rpcn:4195/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

# DEBEZIUM CDC @ local_pgdb1
  debezium:
    image: docker.io/debezium/server:2.7.1.Final
    container_name: debezium
    networks:
      - postgrescdc_network
    links:
      - "local_pgdb1:local_pgdb1"
      - "rpcn:rpcn"
    ports:
      - "18080:8080"
    environment:
      - DEBEZIUM_SINK_TYPE=http
      - DEBEZIUM_SINK_HTTP_URL=http://rpcn:4195/cdc
      - DEBEZIUM_SOURCE_CONNECTOR_CLASS=io.debezium.connector.postgresql.PostgresConnector
      - DEBEZIUM_SOURCE_OFFSET_STORAGE_FILE_FILENAME=data/offsets.dat
      - DEBEZIUM_SOURCE_OFFSET_FLUSH_INTERVAL_MS=0
      - DEBEZIUM_SOURCE_DATABASE_HOSTNAME=local_pgdb1
      - DEBEZIUM_SOURCE_DATABASE_PORT=5432
      - DEBEZIUM_SOURCE_DATABASE_USER=user-name
      - DEBEZIUM_SOURCE_DATABASE_PASSWORD=strong-password
      - DEBEZIUM_SOURCE_DATABASE_DBNAME=stockdb
      - DEBEZIUM_SOURCE_PLUGIN_NAME=pgoutput
      - DEBEZIUM_SOURCE_TOPIC_PREFIX=trades
      - DEBEZIUM_FORMAT_VALUE=json
      - DEBEZIUM_FORMAT_KEY=json
      - DEBEZIUM_FORMAT_HEADER=json
    depends_on:
      pgadmin:
        condition: service_started
      console:
        condition: service_started
      rpcn:
        condition: service_healthy

# SHADOWTRAFFIC
  shadowtraffic-stocks-pgsql:
    container_name: shadowtraffic-stocks-pgsql
    image: shadowtraffic/shadowtraffic:latest
    command: ["--config", "/home/config.json"]
    networks:
      - postgrescdc_network
    env_file:
      - license.env
    volumes:
      - ${PWD}/st_stock_trade-local.json:/home/config.json
    depends_on:
      - pgadmin

volumes:
  local_pgdata_1:
  local_pgdata_2:
  pgadmin-data:
  redpanda-0: null
  redpanda-1: null
  redpanda-2: null

networks:
  postgrescdc_network:
    driver: bridge

